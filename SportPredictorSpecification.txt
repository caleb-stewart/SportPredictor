# SportPredictor Implementation Plan

## Project Overview

SportPredictor is a Rails API application that predicts Western Hockey League (WHL) game outcomes using historical team statistics. The system fetches game data from external APIs, calculates rolling averages, makes predictions using machine learning models, and tracks prediction accuracy over time.

### Main Goals
1. **Data Collection**: Fetch and store 2000+ historical games per team from WHL APIs
2. **Real-time Updates**: Daily fetch upcoming games and completed game results
3. **Prediction Engine**: Generate win probability predictions based on rolling averages (5, 10, 15 games)
4. **Performance Tracking**: Monitor prediction accuracy across different models
5. **Web Interface**: Display upcoming games, predictions, and historical performance

### Key APIs Used
- **Game List API**: `https://lscluster.hockeytech.com/feed/?feed=modulekit&key=41b145a848f4bd67&view=scorebar&client_code=whl&numberofdaysahead=0&numberofdaysback=1000&season_id=&team_id={team_id}&lang_code=en&fmt=json`
- **Game Stats API**: `https://lscluster.hockeytech.com/feed/?feed=gc&key=41b145a848f4bd67&game_id={game_id}&client_code=whl&tab=clock&lang_code=en&fmt=json`

---

## Phase 1: Database Migration and Infrastructure

### 1.1 Database Migration from SQLite to PostgreSQL
**Objective**: Migrate from SQLite3 to PostgreSQL for production deployment

**Tasks**:
- Update `Gemfile` to include `pg` gem and remove `sqlite3`
- Modify `config/database.yml` for PostgreSQL configuration
- Create development, test, and production database configurations
- Ensure all existing migrations work with PostgreSQL
- Test seed data functionality
- Add deployment-ready database configuration

**Files to Modify**:
- `Gemfile`
- `config/database.yml`
- Any SQLite-specific queries in models

### 1.2 Database Schema Updates
**Objective**: Add new tables and columns for expanded functionality

**New Tables**:
```ruby
# WhlRollingAverages
create_table :whl_rolling_averages do |t|
  t.string :game_id, null: false
  t.integer :team_id, null: false
  t.integer :k_value, null: false # 5, 10, or 15
  t.decimal :goals_for_avg, precision: 8, scale: 2
  t.decimal :goals_against_avg, precision: 8, scale: 2
  t.decimal :shots_for_avg, precision: 8, scale: 2
  t.decimal :shots_against_avg, precision: 8, scale: 2
  t.decimal :power_play_percentage_avg, precision: 8, scale: 2
  t.decimal :penalty_kill_percentage_avg, precision: 8, scale: 2
  # Add other rolling average stats as needed
  t.timestamps
  
  t.index [:game_id, :k_value], unique: true
  t.index [:team_id, :k_value]
end

# WhlPredictionRecords
create_table :whl_prediction_records do |t|
  t.string :game_id, null: false
  t.integer :k_value, null: false # 5, 10, or 15
  t.string :home_team, null: false
  t.string :away_team, null: false
  t.string :predicted_winner
  t.decimal :home_team_probability, precision: 5, scale: 4
  t.decimal :away_team_probability, precision: 5, scale: 4
  t.string :actual_winner
  t.boolean :correct, default: nil # null until game is complete
  t.datetime :prediction_date
  t.timestamps
  
  t.index [:game_id, :k_value], unique: true
  t.index :prediction_date
end
```

**WhlTeamStats Updates**:
```ruby
add_column :whl_team_stats, :completed, :boolean, default: false
add_column :whl_team_stats, :season_id, :string
add_column :whl_team_stats, :season_name, :string
add_column :whl_team_stats, :game_date_iso_8601, :datetime
```

---

## Phase 2: Historical Data Collection

### 2.1 Create WHL Data Fetching Service
**Objective**: Build service to fetch historical game data from WHL APIs

**Create**: `app/services/whl_data_fetcher_service.rb`

**Key Features**:
- Fetch game lists for all 22 teams (2000 games per team)
- Handle API rate limiting with randomized delays
- Batch process game IDs to avoid duplicate fetches
- Robust error handling and logging
- Progress tracking

**Team ID Mapping**:
```ruby
TEAM_IDS = {
  'Spokane Chiefs' => '215',
  'Seattle Thunderbirds' => '214',
  'Portland Winterhawks' => '208',
  'Everett Silvertips' => '226',
  'Tri-City Americans' => '217',
  'Kamloops Blazers' => '203',
  'Kelowna Rockets' => '204',
  'Prince George Cougars' => '210',
  'Brandon Wheat Kings' => '201',
  'Swift Current Broncos' => '216',
  'Vancouver Giants' => '223',
  'Victoria Royals' => '227',
  'Medicine Hat Tigers' => '206',
  'Edmonton Oil Kings' => '228',
  'Moose Jaw Warriors' => '207',
  'Regina Pats' => '212',
  'Saskatoon Blades' => '213',
  'Prince Albert Raiders' => '209',
  'Calgary Hitmen' => '202',
  'Lethbridge Hurricanes' => '205',
  'Red Deer Rebels' => '211',
  'Wenatchee Wild' => '222'
}.freeze
```

### 2.2 Create Rake Task for Data Population
**Objective**: Create manageable rake task for initial data population

**Create**: `lib/tasks/whl_data.rake`

**Features**:
- Fetch games in batches (1000 at a time using `numberofdaysback`)
- Process game stats with random delays (1-5 seconds between requests)
- Skip already processed games
- Comprehensive logging
- Resume capability if interrupted

---

## Phase 3: Rolling Averages Calculation

### 3.1 Rolling Averages Service
**Objective**: Calculate and store rolling averages for prediction models

**Create**: `app/services/rolling_averages_service.rb`

**Features**:
- Calculate rolling averages for k=5, 10, 15 games
- Store averages for each game_id representing stats up to that point
- Update averages when new games are added
- Efficient calculation using sliding window approach

### 3.2 Rolling Averages Population Task
**Create**: `lib/tasks/calculate_rolling_averages.rake`

**Features**:
- Populate rolling averages for all historical games
- Update averages incrementally for new games
- Validation and error handling

---

## Phase 4: Daily Data Processing Jobs

### 4.1 Setup Sidekiq for Background Jobs
**Objective**: Configure background job processing

**Tasks**:
- Add Sidekiq to Gemfile
- Configure Redis for job queue
- Setup job scheduling (using cron or whenever gem)

### 4.2 Daily Upcoming Games Job
**Create**: `app/jobs/fetch_upcoming_games_job.rb`

**Scheduled**: Daily at 9:00 AM

**Features**:
- Fetch upcoming games (`numberofdaysahead=1`)
- Create WhlTeamStats records with `completed: false`
- Store: game_id, home_team, away_team, game_date_iso_8601, season_id, season_name
- Trigger prediction generation for fetched games

### 4.3 Daily Completed Games Job
**Create**: `app/jobs/fetch_completed_games_job.rb`

**Scheduled**: Daily at 9:00 AM (after upcoming games job)

**Features**:
- Fetch previous day's results (`numberofdaysback=1`)
- Update existing WhlTeamStats records with game stats
- Set `completed: true`
- Update WhlPredictionRecords with actual results and accuracy
- Update WhlPredictionAccuracy table with daily accuracy metrics

### 4.4 Prediction Generation Service
**Create**: `app/services/prediction_service.rb`

**Features**:
- Generate predictions for upcoming games
- Use rolling averages (k=5, 10, 15) as input features
- Call external ML API for predictions
- Store results in WhlPredictionRecords
- Handle API errors gracefully

---

## Phase 5: API Controllers and Routes

### 5.1 WHL Games Controller
**Create**: `app/controllers/api/v1/whl_games_controller.rb`

**Endpoints**:
```ruby
# GET /api/v1/whl/upcoming_games
def upcoming_games
  # Return upcoming games with predictions
end

# GET /api/v1/whl/completed_games
def completed_games
  # Return completed games with stats and prediction accuracy
  # Support filtering by team, date range
end

# GET /api/v1/whl/predictions
def predictions
  # Return prediction history with accuracy metrics
  # Support filtering by team, k_value, date range
end

# GET /api/v1/whl/team_stats/:team_name
def team_stats
  # Return historical stats for specific team
end
```

### 5.2 Routes Configuration
**Update**: `config/routes.rb`

```ruby
namespace :api do
  namespace :v1 do
    namespace :whl do
      get 'upcoming_games', to: 'whl_games#upcoming_games'
      get 'completed_games', to: 'whl_games#completed_games'
      get 'predictions', to: 'whl_games#predictions'
      get 'team_stats/:team_name', to: 'whl_games#team_stats'
    end
  end
end
```

---

## Phase 6: Data Models and Relationships

### 6.1 Model Enhancements
**Update existing models and create new ones**:

```ruby
# app/models/whl_team_stat.rb
class WhlTeamStat < ApplicationRecord
  has_many :whl_prediction_records, foreign_key: :game_id, primary_key: :game_id
  has_many :whl_rolling_averages, foreign_key: :game_id, primary_key: :game_id
  
  scope :completed, -> { where(completed: true) }
  scope :upcoming, -> { where(completed: false) }
  scope :by_team, ->(team) { where("home_team = ? OR away_team = ?", team, team) }
end

# app/models/whl_prediction_record.rb
class WhlPredictionRecord < ApplicationRecord
  belongs_to :whl_team_stat, foreign_key: :game_id, primary_key: :game_id
  
  validates :k_value, inclusion: { in: [5, 10, 15] }
  validates :home_team_probability, :away_team_probability, 
            numericality: { greater_than: 0, less_than: 1 }
  
  scope :by_k_value, ->(k) { where(k_value: k) }
  scope :correct_predictions, -> { where(correct: true) }
  scope :by_team, ->(team) { where("home_team = ? OR away_team = ?", team, team) }
end

# app/models/whl_rolling_average.rb
class WhlRollingAverage < ApplicationRecord
  validates :k_value, inclusion: { in: [5, 10, 15] }
  validates :game_id, :team_id, presence: true
  
  scope :by_k_value, ->(k) { where(k_value: k) }
  scope :by_team, ->(team_id) { where(team_id: team_id) }
end
```

---

## Phase 7: Error Handling and Monitoring

### 7.1 Logging and Monitoring
**Create**: `app/services/monitoring_service.rb`

**Features**:
- API request logging
- Error tracking and alerting
- Performance metrics
- Data quality checks

### 7.2 Error Handling Strategies
- Retry mechanisms for API failures
- Graceful degradation when external APIs are down
- Data validation and consistency checks
- Comprehensive error logging

---

## Implementation Priority Order

1. **Phase 1**: Database migration and schema updates (Critical)
2. **Phase 2**: Historical data collection service and rake tasks
3. **Phase 3**: Rolling averages calculation
4. **Phase 6**: Model relationships and validations
5. **Phase 4**: Daily job processing
6. **Phase 5**: API controllers and routes
7. **Phase 7**: Error handling and monitoring
